generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(uuid())
  supabaseId String    @unique
  email      String    @unique
  name       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  avatarUrl  String?
  provider   String?
  bookings   Booking[]
}

model City {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  playgrounds Playground[]
}

model Playground {
  id        String   @id @default(uuid())
  name      String
  address   String
  cityId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endTime   String
  startTime String
  city      City     @relation(fields: [cityId], references: [id])
  turfs     Turf[]
}

model Turf {
  id           String     @id @default(uuid())
  name         String
  type         TurfType
  playgroundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  hourlyRate   Float
  bookings     Booking[]
  playground   Playground @relation(fields: [playgroundId], references: [id])
}

model Booking {
  id              String        @id @default(uuid())
  turfId          String
  userEmail          String
  startTime       DateTime
  endTime         DateTime
  totalCost       Float
  stripePaymentId String?
  status          BookingStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  turf            Turf          @relation(fields: [turfId], references: [id])
  user            User          @relation(fields: [userEmail], references: [email])
}

enum TurfType {
  BADMINTON
  CRICKET
  FOOTBALL
  TENNIS
  BASKETBALL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
