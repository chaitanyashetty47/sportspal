// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  supabaseId    String    @unique
  email         String    @unique
  name          String?
  avatarUrl     String?   //added
  provider      String?   // 'google' or 'email'
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model City {
  id          String      @id @default(uuid())
  name        String
  playgrounds Playground[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Playground {
  id        String   @id @default(uuid())
  name      String
  address   String
  cityId    String
  city      City     @relation(fields: [cityId], references: [id])
  turfs     Turf[]
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Turf {
  id           String    @id @default(uuid())
  name         String
  type         TurfType
  playgroundId String
  hourlyRate   Float
  playground   Playground @relation(fields: [playgroundId], references: [id])
  bookings     Booking[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}



model Booking {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  turfId    String
  turf      Turf     @relation(fields: [turfId], references: [id])
  startTime DateTime
  endTime   DateTime
  totalCost Float
  stripePaymentId String?
  status    BookingStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TurfType {
  BADMINTON
  CRICKET
  FOOTBALL
  TENNIS
  BASKETBALL
}



enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}